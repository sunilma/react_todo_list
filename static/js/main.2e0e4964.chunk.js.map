{"version":3,"sources":["components/todo-input/TodoInput.js","components/todo-item/TodoItem.js","components/todo-list/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","disabled","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e0e4964.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class TodoInput extends Component {\n    render() {\n        const { item, handleChange, handleSubmit, editItem } = this.props;\n        return (\n            <div className=\"card card-body my-3\">\n               <form onSubmit={handleSubmit} >\n                   <div className=\"input-group\">\n                       <div className=\"input-group-prepend\">\n                           <div className=\"input-group-text bg-primary text-white\">\n                                <i className=\"fas fa-book\"></i>\n                           </div>\n                       </div>\n                       <input type=\"text\" className=\"form-control text-capitalize\" placeholder=\"Add todo Item\" value={item} onChange={handleChange} />\n                   </div>\n                   <button type=\"submit\" disabled={item ? false : true} className={editItem ? \"btn btn-block btn-success mt-3 text-uppercase\" : \"btn btn-block btn-primary mt-3 text-uppercase\"} >\n                       { editItem? 'edit item': 'add item'}\n                    </button>\n               </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n    render() {\n        const { title, handleDelete, handleEdit } = this.props;\n        return (\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\n                <h6>{ title }</h6>\n                <div className=\"todo-icon\">\n                    <span className=\"mx-2 text-success\" onClick={handleEdit} >\n                        <i className=\"fas fa-pen\"></i>\n                    </span>\n                    <span className=\"mx-2 text-danger\" onClick={handleDelete} >\n                        <i className=\"fas fa-trash\"></i>\n                    </span>\n                </div>\n            </li>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nimport TodoItem from '../todo-item/TodoItem';\n\nexport default class TodoList extends Component {\n    render() {\n        const { items, clearList, handleDelete, handleEdit } = this.props;\n\n        return (\n            <ul className=\"list-group my-5\">\n                <h3 className=\"text-capitalize text-center\">todo list</h3>\n                {\n                    items.map(item => <TodoItem key={item.id} title={item.title} handleDelete={() => handleDelete(item.id)} handleEdit={() => handleEdit(item.id)} />)\n                }\n                <button type=\"button\" className=\"btn btn-danger btn-block text-uppercase mt-5\" onClick={clearList} >clear list</button>\n            </ul>\n        )\n    }\n}\n","import React from 'react';\n\nimport uuid from 'uuid/v4';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nimport TodoInput from './components/todo-input/TodoInput';\nimport TodoList from './components/todo-list/TodoList';\n\nclass App extends React.Component {\n\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n  };\n\n  handleChange = (e) => {\n    this.setState({ item: e.target.value })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    }\n    \n    const updatedItems = [...this.state.items, newItem];\n    this.setState({\n      items: updatedItems,\n      item: '',\n      id: uuid(),\n      editItem: false\n    })\n  }\n\n  clearList = () => {\n    this.setState({items: []});\n  }\n\n  handleEdit = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    const selectedItem = this.state.items.find(item => item.id === id);\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      id: selectedItem.id,\n      editItem: true\n    })\n  }\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    this.setState({ items: filteredItems });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10 mx-auto col-md-8 mt-5\">\n            <h3 className=\"text-capitalize text-center\">todo input</h3>\n            <TodoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit} editItem={this.state.editItem} />\n            <TodoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete} handleEdit={this.handleEdit} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}